name: Release package
on:
  push:
    tags:
      - '[0-9].[0-9]+.[0-9]+'

jobs:
  build-test:
    name: Build, test and publish binaries
    strategy:
      matrix:
        rust_toolchain: [stable]
        os: [ubuntu-latest, macOS-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust_toolchain }}
          override: true

      - name: Check compilation with default features
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --all --bins --examples --tests

      - name: Check compilation with no features
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --all --bins --examples --tests --no-default-features

      - name: cargo +${{ matrix.rust_toolchain }} test ${{ matrix.os }}
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all

      - name: Build CLI
        if: matrix.os == 'ubuntu-latest'
        run: |
          cargo b --release --bin cddl
          cp target/release/cddl cddl-linux-amd64
          chmod +x cddl-linux-amd64

      - name: Build CLI
        if: matrix.os == 'macOS-latest'
        run: |
          source $HOME/.cargo/env
          cargo b --release --bin cddl
          cp target/release/cddl cddl-darwin-amd64
          chmod +x cddl-darwin-amd64

      - name: Build CLI
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          cargo b --release --bin cddl
          cp target\release\cddl.exe cddl-windows-amd64.exe

      - name: Upload binary artifact
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v1
        with:
          name: cddl-linux-amd64
          path: ./cddl-linux-amd64

      - name: Upload binary artifact
        if: matrix.os == 'macOS-latest'
        uses: actions/upload-artifact@v1
        with:
          name: cddl-darwin-amd64
          path: ./cddl-darwin-amd64

      - name: Upload binary artifact
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v1
        with:
          name: cddl-windows-amd64.exe
          path: ./cddl-windows-amd64.exe

  publish-release:
    name: Create Release and Publish Binaries
    needs: [build-test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Get changelog
        id: changelog
        run: |
          echo "::set-output name=body::$(git log $(git describe --tags --abbrev=0 HEAD^)..HEAD --pretty=format:"%h %s")"

      - name: Download linux binary artifact
        uses: actions/download-artifact@v1
        with:
          name: cddl-linux-amd64
          path: ./cddl-linux-amd64

      - name: Download windows binary artifact
        uses: actions/download-artifact@v1
        with:
          name: cddl-windows-amd64.exe
          path: ./cddl-windows-amd64.exe

      - name: Download macOS binary artifact
        uses: actions/download-artifact@v1
        with:
          name: cddl-darwin-amd64
          path: ./cddl-darwin-amd64

      - name: Prepare binaries for publishing
        run: |
          chmod +x cddl-darwin-amd64 cddl-linux-amd64
          zip cddl-darwin-amd64.zip cddl-darwin-amd64
          zip cddl-windows-amd64.zip cddl-windows-amd64.exe
          tar -czvf cddl-linux-amd64.tar.gz cddl-linux-amd64
          ls -a

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          body: ${{ steps.changelog.outputs.body }}
          files: |
            cddl-linux-amd64.tar.gz
            cddl-windows-amd64.zip
            cddl-darwin-amd64.zip

  publish-docker-image:
    name: Publish Docker image
    needs: publish-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Build image
        run: |
          export TAG=`git describe --tags`
          docker build -t docker.pkg.github.com/anweiss/cddl/cddl:$TAG .

      - name: Login to GPR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          docker login docker.pkg.github.com -u anweiss -p $GITHUB_TOKEN

      - name: Push image
        run: |
          export TAG=`git describe --tags`
          docker push docker.pkg.github.com/anweiss/cddl/cddl:$TAG

  publish-crate:
    name: Publish crate
    strategy:
      matrix:
        rust_toolchain: [stable]
    runs-on: ubuntu-latest
    needs: publish-release
    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust_toolchain }}
          override: true

      - name: Login to crates.io
        uses: actions-rs/cargo@v1
        with:
          command: login
          args: ${{ secrets.CratesIOToken }}

      - name: Publish crate
        uses: actions-rs/cargo@v1
        with:
          command: publish

  publish-npm:
    name: Publish npm package
    needs: publish-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: wasm32-unknown-unknown

      - name: Install wasmpack
        run: |
          curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Install node
        uses: actions/setup-node@v1
        with:
          node-verison: '10.x'

      - name: Build wasm
        run: |
          wasm-pack build --target nodejs --scope anweiss --release

      - name: Publish to GPR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cp .npmrc pkg/
          echo "//npm.pkg.github.com/:_authToken=$GITHUB_TOKEN" > ~/.npmrc
          cd www
          npm publish --access=public

  publish-wasm:
    name: Publish wasm
    needs: publish-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: wasm32-unknown-unknown

      - name: Install wasmpack
        run: |
          curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Install node
        uses: actions/setup-node@v1
        with:
          node-verison: '10.x'

      - name: Build wasm
        run: |
          wasm-pack build --release

      - name: Build web
        run: |
          cd www
          npm install
          npm run build

      - name: Deploy web
        uses: JamesIves/github-pages-deploy-action@releases/v3
        with:
          ACCESS_TOKEN: ${{ secrets.AccessToken }}
          BRANCH: gh-pages
          FOLDER: www/dist
