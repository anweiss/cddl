name: Release package
on:
  push:
    tags:
      - "[0-9].[0-9]+.[0-9]+"

jobs:
  compilation-check:
    strategy:
      matrix:
        rust_toolchain: [stable]
        os: [ubuntu-latest, macOS-latest, windows-latest]
    name: Compilation check
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout source
        uses: actions/checkout@master

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust_toolchain }}
          override: true

      - name: Check compilation with default features
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --all --bins --examples --tests

      - name: Check compilation with no features
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --all --bins --examples --tests --no-default-features

  test-suite:
    strategy:
      matrix:
        rust_toolchain: [stable]
        os: [ubuntu-latest, macOS-latest, windows-latest]
    name: Test suite
    needs: compilation-check
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout source
        uses: actions/checkout@master

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust_toolchain }}
          override: true

      - name: cargo +${{ matrix.rust_toolchain }} test ${{ matrix.platform }}
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all

  create-release:
    name: Create GitHub release
    runs-on: ubuntu-latest
    needs: test-suite
    steps:
      - name: Checkout source
        uses: actions/checkout@master

      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.AccessToken }}
        run: |
          mkdir -p $HOME/go/src $HOME/go/bin $HOME/go/pkg
          export GOPATH="$HOME/go"
          export GOBIN="$GOPATH/bin"
          export PATH="$PATH:$GOBIN"
          go get -u github.com/aktau/github-release
          export TAG=`git describe --tags`
          export DESCRIPTION="$(git log $(git describe --tags --abbrev=0 HEAD^)..HEAD --pretty=format:"%h %s")"
          github-release release --user anweiss --repo cddl --tag $TAG --name $TAG --description "$DESCRIPTION" --draft

  upload-binaries:
    name: Upload binaries
    strategy:
      matrix:
        rust_toolchain: [stable]
        os: [ubuntu-latest, windows-latest, macOS-latest]
    runs-on: ${{ matrix.os }}
    needs: create-release
    steps:
      - name: Checkout source
        uses: actions/checkout@master

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust_toolchain }}
          override: true

      - name: cargo +${{ matrix.rust_toolchain }} test ${{ matrix.platform }}
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all

      - name: Build CLI
        if: matrix.platform == 'ubuntu-latest'
        run: |
          cargo b --release --bin cddl
          cp target/release/cddl cddl-linux-amd64
          chmod +x cddl-linux-amd64
          tar -czvf cddl-linux-amd64.tar.gz cddl-linux-amd64

      - name: Build CLI
        if: matrix.platform == 'macOS-latest'
        run: |
          source $HOME/.cargo/env
          cargo b --release --bin cddl
          cp target/release/cddl cddl-darwin-amd64
          chmod +x cddl-darwin-amd64
          zip cddl-darwin-amd64.zip cddl-darwin-amd64

      - name: Build CLI
        if: matrix.platform == 'windows-latest'
        shell: powershell
        run: |
          cargo b --release --bin cddl
          cp target\release\cddl.exe cddl-windows-amd64.exe
          Compress-Archive -Path .\cddl-windows-amd64.exe -DestinationPath cddl-windows-amd64.zip

      - name: Upload binary
        if: matrix.platform == 'windows-latest'
        shell: powershell
        env:
          GITHUB_TOKEN: ${{ secrets.AccessToken }}
        run: |
          $tag = $(git describe --tags)
          mkdir -p $env:HOME\go\src
          mkdir -p $env:HOME\go\bin
          mkdir -p $env:HOME\go\pkg
          $env:GOPATH = "D:\go"
          $env:GOBIN = "$env:GOPATH\bin"
          $env:PATH = "$env:PATH;$env:GOBIN"
          go get -u github.com/aktau/github-release
          github-release upload --user anweiss --repo cddl --tag $tag --name "cddl-windows-amd64.zip" --file cddl-windows-amd64.zip

      - name: Upload binary
        if: matrix.platform == 'ubuntu-latest'
        env:
          GITHUB_TOKEN: ${{ secrets.AccessToken }}
        run: |
          mkdir -p $HOME/go/src $HOME/go/bin $HOME/go/pkg
          export GOPATH="$HOME/go"
          export GOBIN="$GOPATH/bin"
          export PATH="$PATH:$GOBIN"
          go get -u github.com/aktau/github-release
          github-release upload --user anweiss --repo cddl --tag `git describe --tags` --name "cddl-linux-amd64.tar.gz" --file cddl-linux-amd64.tar.gz

      - name: Upload binary
        if: matrix.platform == 'macOS-latest'
        env:
          GITHUB_TOKEN: ${{ secrets.AccessToken }}
        run: |
          mkdir -p $HOME/go/src $HOME/go/bin $HOME/go/pkg
          export GOPATH="$HOME/go"
          export GOBIN="$GOPATH/bin"
          export PATH="$PATH:$GOBIN"
          go get -u github.com/aktau/github-release
          github-release upload --user anweiss --repo cddl --tag `git describe --tags` --name "cddl-darwin-amd64.zip" --file cddl-darwin-amd64.zip

  publish-release:
    name: Publish release
    runs-on: ubuntu-latest
    needs: upload-binaries
    steps:
      - name: Checkout source
        uses: actions/checkout@master

      - name: Publish release
        env:
          GITHUB_TOKEN: ${{ secrets.AccessToken }}
        run: |
          mkdir -p $HOME/go/src $HOME/go/bin $HOME/go/pkg
          export GOPATH="$HOME/go"
          export GOBIN="$GOPATH/bin"
          export PATH="$PATH:$GOBIN"
          go get -u github.com/aktau/github-release
          export DESCRIPTION="$(git log $(git describe --tags --abbrev=0 HEAD^)..HEAD --pretty=format:"%h %s")"
          github-release edit --user anweiss --repo cddl --tag `git describe --tags` --description "$DESCRIPTION"

  publish-docker-image:
    name: Publish Docker image
    runs-on: ubuntu-latest
    needs: publish-release
    steps:
      - name: Checkout source
        uses: actions/checkout@master

      - name: Build image
        run: |
          export TAG=`git describe --tags`
          docker build -t docker.pkg.github.com/anweiss/cddl/cddl:$TAG .

      - name: Login to GPR
        env:
          GPR_PAT: ${{ secrets.GPRPat }}
        run: |
          docker login docker.pkg.github.com -u anweiss -p $GPR_PAT

      - name: Push image
        run: |
          export TAG=`git describe --tags`
          docker push docker.pkg.github.com/anweiss/cddl/cddl:$TAG

  publish-crate:
    name: Publish crate
    runs-on: ubuntu-latest
    needs: publish-release
    steps:
      - name: Checkout source
        uses: actions/checkout@master

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust_toolchain }}
          override: true

      - name: Login to crates.io
        uses: actions-rs/cargo@v1
        with:
          command: login
          args: ${{ secrets.CratesIOToken }}

      - name: Publish crate
        uses: actions-rs/cargo@v1
        with:
          command: publish

  publish-npm:
    strategy:
      matrix:
        rust_toolchain: [stable]
        os: [ubuntu-latest]
    name: Publish npm package
    runs-on: ${{ matrix.os }}
    needs: publish-release
    steps:
      - name: Checkout source
        uses: actions/checkout@master

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust_toolchain }}
          override: true
          target: wasm32-unknown-unknown

      - name: Install wasmpack
        run: |
          curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Install node
        uses: actions/setup-node@v1
        with:
          node-verison: "10.x"

      - name: Build wasm
        run: |
          wasm-pack build --target nodejs --scope anweiss --release

      - name: Publish to GPR
        env:
          NPM_TOKEN: ${{ secrets.GPRPat }}
        run: |
          cp .npmrc pkg/
          echo "//npm.pkg.github.com/:_authToken=${NPM_TOKEN}" > ~/.npmrc
          cd www
          npm publish --access=public
