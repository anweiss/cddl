on:
  push:
    branches:
      - "*"
    tags-ignore:
      - "*"

name: Build and Test

jobs:
  minimum-version-check:
    strategy:
      matrix:
        rust_toolchain: [1.36.0]
        platform: [ubuntu-latest, macOS-latest, windows-latest]
    name: minimum version check using Rust ${{ matrix.rust_toolchain }} on ${{ matrix.platform }}
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout source
        uses: actions/checkout@master

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust_toolchain }}
          override: true

      - name: Check compilation with default features
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --all --bins --examples --tests

      - name: Check compilation with no features
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --all --bins --examples --tests --no-default-features

  compilation-check:
    strategy:
      matrix:
        rust_toolchain: [stable, beta, nightly]
        platform: [ubuntu-latest, macOS-latest, windows-latest]
    name: Compilation check
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout source
        uses: actions/checkout@master

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust_toolchain }}
          override: true

      - name: Check compilation with default features
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --all --bins --examples --tests

      - name: Check compilation with no features
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --all --bins --examples --tests --no-default-features

      - name: Check compilation with all features
        if: matrix.rust_toolchain == 'nightly'
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --all --bins --examples --tests --all-features

  test-suite:
    strategy:
      matrix:
        rust_toolchain: [stable, beta, nightly]
        platform: [ubuntu-latest, macOS-latest, windows-latest]
    name: Test suite
    needs: compilation-check
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout source
        uses: actions/checkout@master

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust_toolchain }}
          override: true

      - name: cargo +${{ matrix.rust_toolchain }} test ${{ matrix.platform }}
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all

  style-linting:
    strategy:
      matrix:
        rust_toolchain: [stable, beta]
        platform: [ubuntu-latest, macOS-latest, windows-latest]
    name: Style linting
    needs: compilation-check
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout source
        uses: actions/checkout@master

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust_toolchain }}
          override: true
          components: rustfmt, clippy

      - name: cargo +${{ matrix.rust_toolchain }} fmt ${{ matrix.platform }}
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Install clippy
        if: matrix.platform == 'macOS-latest'
        run: |
          source $HOME/.cargo/env
          rustup component add clippy

      - name: cargo +${{ matrix.rust_toolchain }} clippy ${{ matrix.platform }}
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all

  publish-wasm:
    strategy:
      matrix:
        rust_toolchain: [stable]
        platform: [ubuntu-latest]
    name: Publish wasm
    needs: compilation-check
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout source
        uses: actions/checkout@master

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust_toolchain }}
          override: true
          target: wasm32-unknown-unknown

      - name: Install wasmpack
        run: |
          curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Install node
        uses: actions/setup-node@v1
        with:
          node-verison: "10.x"

      - name: Build wasm
        run: |
          wasm-pack build --release

      - name: Build web
        env:
          GIT_USER: ${{ secrets.GitUser }}
          REPO_PAT: ${{ secrets.AccessToken }}
        run: |
          cd www
          npm install
          rm -rf dist/
          git config user.email "andrew.weiss@outlook.com"
          git config user.name "Andrew Weiss"
          mkdir dist
          git worktree add dist gh-pages
          cd dist
          git pull "https://$GIT_USER:$REPO_PAT@github.com/anweiss/cddl.git" gh-pages
          git rm -r .
          git checkout HEAD -- CNAME
          cd ..
          npm run build

      - name: Push web
        env:
          GIT_USER: ${{ secrets.GitUser }}
          REPO_PAT: ${{ secrets.AccessToken }}
        run: |
          cd www/dist
          git add -A
          git diff-index --quiet HEAD || git commit -m 'CI website build'
          git push https://$GIT_USER:$REPO_PAT@github.com/anweiss/cddl.git gh-pages
