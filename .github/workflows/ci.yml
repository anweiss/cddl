on: [ push ]

name: Build and Test

jobs:
  minimum-version-check:
    strategy:
      matrix:
        rust_toolchain: [ 1.36.0 ]
        platform: [ ubuntu-latest, macOS-latest, windows-latest ]
    name: minimum version check using Rust ${{ matrix.rust_toolchain }} on ${{ matrix.platform }}
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Install Rust
        if: matrix.platform != 'windows-latest'
        env:
          RUSTUP_TOOLCHAIN: ${{ matrix.rust_toolchain }}
        run: |
          set -e
          curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $RUSTUP_TOOLCHAIN
          export PATH="$PATH:$HOME/.cargo/bin"
          echo "##vso[task.setvariable variable=PATH;]$PATH;$HOME/.cargo/bin"
          source $HOME/.cargo/env
          rustup default $RUSTUP_TOOLCHAIN
          rustup update $RUSTUP_TOOLCHAIN

      - name: Install Rust
        if: matrix.platform == 'windows-latest'
        env:
          RUSTUP_TOOLCHAIN: ${{ matrix.rust_toolchain }}
        shell: powershell
        run: |
          Invoke-WebRequest -UseBasicParsing -Uri "https://win.rustup.rs/x86_64" -OutFile rustup-init.exe
          .\rustup-init.exe -v -y --default-toolchain "$env:RUSTUP_TOOLCHAIN"
          Remove-Item -Path .\rustup-init.exe
          $env:PATH = "$env:PATH;$env:Programfiles\Rust\.cargo\bin"
          echo "##vso[task.setvariable variable=PATH;]$env:PATH;$env:Programfiles\Rust\.cargo\bin"

      - name: Set Rust version
        if: matrix.platform == 'windows-latest'
        env:
          RUSTUP_TOOLCHAIN: ${{ matrix.rust_toolchain }}
        run: |
          rustup install %RUSTUP_TOOLCHAIN%
          rustup default %RUSTUP_TOOLCHAIN%
          rustup update %RUSTUP_TOOLCHAIN%

      - name: Checkout source
        uses: actions/checkout@master

      - name: Check compilation with default features
        if: matrix.platform != 'macOS-latest'
        run: |
          cargo check --all --bins --examples --tests

      - name: Check compilation with default features
        if: matrix.platform == 'macOS-latest'
        run: |
          source $HOME/.cargo/env
          cargo check --all --bins --examples --tests

      - name: Check compilation with no features
        if: matrix.platform != 'macOS-latest'
        run: |
          cargo check --all --bins --examples --tests --no-default-features

      - name: Check compilation with no features
        if: matrix.platform == 'macOS-latest'
        run: |
          source $HOME/.cargo/env
          cargo check --all --bins --examples --tests --no-default-features

      - name: Check compilation with all features
        if: matrix.platform != 'macOS-latest'
        run: |
          cargo check --all --bins --examples --tests --all-features

      - name: Check compilation with all features
        if: matrix.platform == 'macOS-latest'
        run: |
          source $HOME/.cargo/env
          cargo check --all --bins --examples --tests --all-features

  compilation-check:
    strategy:
      matrix:
        rust_toolchain: [ stable ]
        platform: [ ubuntu-latest, macOS-latest, windows-latest ]
    name: Compilation check
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Install Rust
        if: matrix.platform != 'windows-latest'
        env:
          RUSTUP_TOOLCHAIN: ${{ matrix.rust_toolchain }}
        run: |
          set -e
          curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $RUSTUP_TOOLCHAIN
          export PATH="$PATH:$HOME/.cargo/bin"
          echo "##vso[task.setvariable variable=PATH;]$PATH;$HOME/.cargo/bin"
          source $HOME/.cargo/env
          rustup default $RUSTUP_TOOLCHAIN
          rustup update $RUSTUP_TOOLCHAIN

      - name: Install Rust
        if: matrix.platform == 'windows-latest'
        env:
          RUSTUP_TOOLCHAIN: ${{ matrix.rust_toolchain }}
        shell: powershell
        run: |
          Invoke-WebRequest -UseBasicParsing -Uri "https://win.rustup.rs/x86_64" -OutFile rustup-init.exe
          .\rustup-init.exe -v -y --default-toolchain "$env:RUSTUP_TOOLCHAIN"
          Remove-Item -Path .\rustup-init.exe
          $env:PATH = "$env:PATH;$env:Programfiles\Rust\.cargo\bin"
          echo "##vso[task.setvariable variable=PATH;]$env:PATH;$env:Programfiles\Rust\.cargo\bin"

      - name: Set Rust version
        if: matrix.platform == 'windows-latest'
        env:
          RUSTUP_TOOLCHAIN: ${{ matrix.rust_toolchain }}
        run: |
          rustup install %RUSTUP_TOOLCHAIN%
          rustup default %RUSTUP_TOOLCHAIN%
          rustup update %RUSTUP_TOOLCHAIN%

      - name: Checkout source
        uses: actions/checkout@master

      - name: Check compilation with default features
        if: matrix.platform != 'macOS-latest'
        run: |
          cargo check --all --bins --examples --tests

      - name: Check compilation with default features
        if: matrix.platform == 'macOS-latest'
        run: |
          source $HOME/.cargo/env
          cargo check --all --bins --examples --tests

      - name: Check compilation with no features
        if: matrix.platform != 'macOS-latest'
        run: |
          cargo check --all --bins --examples --tests --no-default-features

      - name: Check compilation with no features
        if: matrix.platform == 'macOS-latest'
        run: |
          source $HOME/.cargo/env
          cargo check --all --bins --examples --tests --no-default-features

      - name: Check compilation with all features
        if: matrix.platform != 'macOS-latest'
        run: |
          cargo check --all --bins --examples --tests --all-features

      - name: Check compilation with all features
        if: matrix.platform == 'macOS-latest'
        run: |
          source $HOME/.cargo/env
          cargo check --all --bins --examples --tests --all-features
      
  test-suite:
    strategy:
      matrix:
        rust_toolchain: [ stable, beta, nightly ]
        platform: [ ubuntu-latest, macOS-latest, windows-latest ]
    name: Test suite
    needs: compilation-check
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Install Rust
        if: matrix.platform != 'windows-latest'
        env:
          RUSTUP_TOOLCHAIN: ${{ matrix.rust_toolchain }}
        run: |
          set -e
          curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $RUSTUP_TOOLCHAIN
          export PATH="$PATH:$HOME/.cargo/bin"
          echo "##vso[task.setvariable variable=PATH;]$PATH;$HOME/.cargo/bin"
          source $HOME/.cargo/env
          rustup default $RUSTUP_TOOLCHAIN
          rustup update $RUSTUP_TOOLCHAIN

      - name: Install Rust
        if: matrix.platform == 'windows-latest'
        env:
          RUSTUP_TOOLCHAIN: ${{ matrix.rust_toolchain }}
        shell: powershell
        run: |
          Invoke-WebRequest -UseBasicParsing -Uri "https://win.rustup.rs/x86_64" -OutFile rustup-init.exe
          .\rustup-init.exe -v -y --default-toolchain "$env:RUSTUP_TOOLCHAIN"
          Remove-Item -Path .\rustup-init.exe
          $env:PATH = "$env:PATH;$env:Programfiles\Rust\.cargo\bin"
          echo "##vso[task.setvariable variable=PATH;]$env:PATH;$env:Programfiles\Rust\.cargo\bin"

      - name: Set Rust version
        if: matrix.platform == 'windows-latest'
        env:
          RUSTUP_TOOLCHAIN: ${{ matrix.rust_toolchain }}
        run: |
          rustup install %RUSTUP_TOOLCHAIN%
          rustup default %RUSTUP_TOOLCHAIN%
          rustup update %RUSTUP_TOOLCHAIN%

      - name: Checkout source
        uses: actions/checkout@master

      - name: cargo +${{ matrix.rust_toolchain }} test ${{ matrix.platform }}
        if: matrix.platform != 'macOS-latest'
        run: |
          cargo test --all

      - name: cargo +${{ matrix.rust_toolchain }} test ${{ matrix.platform }}
        if: matrix.platform == 'macOS-latest'
        run: |
          source $HOME/.cargo/env
          cargo test --all

  style-linting:
    strategy:
      matrix:
        rust_toolchain: [ stable, beta ]
        platform: [ ubuntu-latest, macOS-latest, windows-latest ]
    name: Style linting
    needs: compilation-check
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Install Rust
        if: matrix.platform != 'windows-latest'
        env:
          RUSTUP_TOOLCHAIN: ${{ matrix.rust_toolchain }}
        run: |
          set -e
          curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $RUSTUP_TOOLCHAIN
          export PATH="$PATH:$HOME/.cargo/bin"
          echo "##vso[task.setvariable variable=PATH;]$PATH;$HOME/.cargo/bin"
          source $HOME/.cargo/env
          rustup default $RUSTUP_TOOLCHAIN
          rustup update $RUSTUP_TOOLCHAIN

      - name: Install Rust
        if: matrix.platform == 'windows-latest'
        env:
          RUSTUP_TOOLCHAIN: ${{ matrix.rust_toolchain }}
        shell: powershell
        run: |
          Invoke-WebRequest -UseBasicParsing -Uri "https://win.rustup.rs/x86_64" -OutFile rustup-init.exe
          .\rustup-init.exe -v -y --default-toolchain "$env:RUSTUP_TOOLCHAIN"
          Remove-Item -Path .\rustup-init.exe
          $env:PATH = "$env:PATH;$env:Programfiles\Rust\.cargo\bin"
          echo "##vso[task.setvariable variable=PATH;]$env:PATH;$env:Programfiles\Rust\.cargo\bin"

      - name: Set Rust version
        if: matrix.platform == 'windows-latest'
        env:
          RUSTUP_TOOLCHAIN: ${{ matrix.rust_toolchain }}
        run: |
          rustup install %RUSTUP_TOOLCHAIN%
          rustup default %RUSTUP_TOOLCHAIN%
          rustup update %RUSTUP_TOOLCHAIN%

      - name: Checkout source
        uses: actions/checkout@master

      - name: Install rustfmt
        if: matrix.platform != 'macOS-latest'
        run: |
          rustup component add rustfmt

      - name: Install rustfmt
        if: matrix.platform == 'macOS-latest'
        run: |
          source $HOME/.cargo/env
          rustup component add rustfmt

      - name: cargo +${{ matrix.rust_toolchain }} fmt ${{ matrix.platform }}
        if: matrix.platform != 'macOS-latest'
        run: |
          cargo fmt --all -- --check

      - name: cargo +${{ matrix.rust_toolchain }} fmt ${{ matrix.platform }}
        if: matrix.platform == 'macOS-latest'
        run: |
          source $HOME/.cargo/env
          cargo fmt --all -- --check

      - name: Install clippy
        if: matrix.platform != 'macOS-latest'
        run: |
          rustup component add clippy

      - name: Install clippy
        if: matrix.platform == 'macOS-latest'
        run: |
          source $HOME/.cargo/env
          rustup component add clippy

      - name: cargo +${{ matrix.rust_toolchain }} clippy ${{ matrix.platform }}
        if: matrix.platform != 'macOS-latest'
        run: |
          cargo clippy --all

      - name: cargo +${{ matrix.rust_toolchain }} clippy ${{ matrix.platform }}
        if: matrix.platform == 'macOS-latest'
        run: |
          source $HOME/.cargo/env
          cargo clippy --all 
