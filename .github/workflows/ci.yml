on:
  push:
    tags-ignore:
      - '*'
    paths:
      - '.github/workflows/ci.yml'
      - '.github/workflows/anchore-analysis.yml'
      - 'Dockerfile'
      - '.dockerignore'
      - 'Cargo.toml'
      - 'src/**'
      - 'tests/**'
  pull_request:
    paths:
      - '.github/workflows/ci.yml'
      - '.github/workflows/anchore-analysis.yml'
      - 'Dockerfile'
      - '.dockerignore'
      - 'Cargo.toml'
      - 'src/**'
      - 'tests/**'

name: Build and Test

jobs:
  minimum-version-check:
    strategy:
      matrix:
        rust_toolchain: [1.51.0]
        os: [ubuntu-latest, macOS-latest, windows-latest]
    name: minimum version check using Rust ${{ matrix.rust_toolchain }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust_toolchain }}
          override: true

      - name: Check compilation with default features
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --all --bins --examples --tests

      - name: Check compilation with no features
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --all --bins --examples --tests --no-default-features

  compilation-check:
    uses: anweiss/cddl/.github/workflows/compilation-check.yml@main

  wasm-compilation-check:
    strategy:
      matrix:
        rust_toolchain: [stable]
    name: Compilation check for wasm target
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust_toolchain }}
          target: wasm32-unknown-unknown
          override: true

      - name: Check compilation for wasm target
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --lib --target wasm32-unknown-unknown

  test-suite:
    strategy:
      matrix:
        rust_toolchain: [stable]
        os: [ubuntu-latest, macOS-latest, windows-latest]
    name: Test suite
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust_toolchain }}
          override: true

      - name: cargo +${{ matrix.rust_toolchain }} test ${{ matrix.os }}
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all -- --nocapture

  style-linting:
    strategy:
      matrix:
        rust_toolchain: [stable]
    name: Style linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust_toolchain }}
          override: true
          components: rustfmt, clippy

      - name: cargo +${{ matrix.rust_toolchain }} fmt
        if: ${{ always() }}
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: cargo +${{ matrix.rust_toolchain }} clippy
        if: ${{ always() }}
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all

  wasm-style-linting:
    strategy:
      matrix:
        rust_toolchain: [stable]
    name: wasm style linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust_toolchain }}
          target: wasm32-unknown-unknown
          override: true
          components: rustfmt, clippy

      - name: cargo +${{ matrix.rust_toolchain }} clippy
        if: ${{ always() }}
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --lib --target wasm32-unknown-unknown
