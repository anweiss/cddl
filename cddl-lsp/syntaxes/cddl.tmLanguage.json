{
  "scopeName": "source.cddl",
  "patterns": [{ "include": "#expression" }],
  "repository": {
    "expression": {
      "patterns": [
        { "include": "#comments" },
        { "include": "#rule-assignment" },
        { "include": "#group-expression" },
        { "include": "#map-expression" },
        { "include": "#array-expression" },
        { "include": "#generic-arguments" },
        { "include": "#invalid-control-operator" },
        { "include": "#range-control-operator" },
        { "include": "#socketplug" },
        { "include": "#ruleidentifier" },
        { "include": "#number" },
        { "include": "#standard-prelude" },
        { "include": "#ruleidentifierref" },
        { "include": "#literal-text-string" },
        { "include": "#literal-byte-string" },
        { "include": "#choiceseparator" },
        { "include": "#occurrence" },
        { "include": "#operators" },
        { "include": "#separators" }
      ]
    },
    "rule-assignment": {
      "patterns": [
        {
          "match": "\\s*(\\w[\\w\\-\\.]*)(\\s*<[^>]*>)?(\\s*)(=|//=|/=)",
          "captures": {
            "1": { "name": "entity.name.function.cddl" },
            "2": { "name": "meta.generic.cddl" },
            "4": { "name": "keyword.operator.assignment.cddl" }
          }
        }
      ]
    },
    "generic-arguments": {
      "begin": "<",
      "end": ">",
      "beginCaptures": {
        "0": { "name": "punctuation.definition.generic.begin.cddl" }
      },
      "endCaptures": {
        "0": { "name": "punctuation.definition.generic.end.cddl" }
      },
      "name": "meta.generic.cddl",
      "patterns": [
        { "include": "#expression" },
        {
          "match": ",",
          "name": "punctuation.separator.generic.cddl"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "match": "=>",
          "name": "keyword.operator.key-value.cddl"
        },
        {
          "match": ":",
          "name": "keyword.operator.type.cddl"
        },
        {
          "match": "\\^",
          "name": "keyword.operator.cut.cddl"
        }
      ]
    },
    "separators": {
      "patterns": [
        {
          "match": ",",
          "name": "punctuation.separator.cddl"
        }
      ]
    },
    "group-expression": {
      "begin": "\\(",
      "end": "\\)",
      "beginCaptures": {
        "0": { "name": "punctuation.definition.group.begin.cddl" }
      },
      "endCaptures": {
        "0": { "name": "punctuation.definition.group.end.cddl" }
      },
      "name": "meta.structure.group.cddl",
      "patterns": [{ "include": "#expression" }]
    },
    "map-expression": {
      "begin": "\\{",
      "end": "\\}",
      "beginCaptures": {
        "0": { "name": "punctuation.definition.map.begin.cddl" }
      },
      "endCaptures": {
        "0": { "name": "punctuation.definition.map.end.cddl" }
      },
      "name": "meta.structure.map.cddl",
      "patterns": [{ "include": "#expression" }]
    },
    "array-expression": {
      "begin": "\\[",
      "end": "\\]",
      "beginCaptures": {
        "0": { "name": "punctuation.definition.array.begin.cddl" }
      },
      "endCaptures": {
        "0": { "name": "punctuation.definition.array.end.cddl" }
      },
      "name": "meta.structure.array.cddl",
      "patterns": [{ "include": "#expression" }]
    },
    "range-control-operator": {
      "match": "\\.\\.\\.|\\.\\.|\\.size|\\.bits|\\.regexp|\\.pcre|\\.cbor|\\.cborseq|\\.within|\\.and|\\.lt|\\.le|\\.gt|\\.ge|\\.eq|\\.ne|\\.default",
      "name": "keyword.operator.control.cddl"
    },
    "invalid-control-operator": {
      "patterns": [
        {
          "comment": "Numeric types with string-only control operators",
          "match": "\\b(uint|nint|int|float(?:16|32|64)?|number|time)\\s*(\\.(?:regexp|pcre|cbor|cborseq))\\b",
          "captures": {
            "1": { "name": "keyword.type.builtin.cddl" },
            "2": { "name": "invalid.illegal.control-operator.cddl" }
          }
        },
        {
          "comment": "Text strings with byte-string-only control operators",
          "match": "\\b(tstr|text)\\s*(\\.(?:bits|cbor|cborseq))\\b",
          "captures": {
            "1": { "name": "keyword.type.builtin.cddl" },
            "2": { "name": "invalid.illegal.control-operator.cddl" }
          }
        },
        {
          "comment": "Byte strings with text-string-only control operators",
          "match": "\\b(bstr|bytes)\\s*(\\.(?:regexp|pcre))\\b",
          "captures": {
            "1": { "name": "keyword.type.builtin.cddl" },
            "2": { "name": "invalid.illegal.control-operator.cddl" }
          }
        },
        {
          "comment": "Boolean and null types with inappropriate control operators",
          "match": "\\b(bool|true|false|nil|null|undefined)\\s*(\\.(?:size|bits|regexp|pcre|cbor|cborseq|lt|le|gt|ge))\\b",
          "captures": {
            "1": { "name": "keyword.type.builtin.cddl" },
            "2": { "name": "invalid.illegal.control-operator.cddl" }
          }
        },
        {
          "comment": "Array or map types with numeric control operators",
          "match": "(\\[|\\{).*(\\.(?:lt|le|gt|ge|bits))\\b",
          "captures": {
            "2": { "name": "invalid.illegal.control-operator.cddl" }
          }
        }
      ]
    },
    "standard-prelude": {
      "match": "(?<!-|_)\\bany\\b(?!-|_)|\\binteger\\b|\\buint\\b|\\bnint\\b|\\bint\\b|\\bbstr\\b|\\bbytes\\b|\\btstr\\b|\\btext\\b|\\btdate\\b|\\btime\\b|\\bnumber\\b|\\bbiguint\\b|\\bbignint\\b|\\bbigint\\b|\\bunsigned\\b|\\bdecfrac\\b|\\bbigfloat\\b|\\beb64url\\b|\\beb64legacy\\b|\\beb16\\b|\\bencoded\\-cbor\\b|(?<!-|_)\\buri\\b(?!-|_)|\\bb64url\\b|\\bb64legacy\\b|\\bregexp\\b|\\bmime\\-message\\b|\\bcbor\\-any\\b|\\bfloat16\\b|\\bfloat32\\b|\\bfloat64\\b|\\bfloat16\\-32\\b|\\bfloat32\\-64\\b|\\bfloat\\b|\\bfalse\\b|\\btrue\\b|\\bbool\\b|\\bnil\\b|\\bnull\\b|\\bundefined\\b",
      "name": "keyword.type.builtin.cddl"
    },
    "comments": {
      "match": "(;).*$\\n?",
      "name": "comment.line.cddl",
      "captures": {
        "1": {
          "name": "punctuation.definition.comment.cddl"
        }
      }
    },
    "literal-text-string": {
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.cddl"
        }
      },
      "end": "\"",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.cddl"
        }
      },
      "name": "string.quoted.double.cddl",
      "patterns": [
        {
          "include": "#stringcontent"
        }
      ]
    },
    "literal-byte-string": {
      "begin": "(b64|h)?'",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.cddl"
        }
      },
      "end": "'",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.cddl"
        }
      },
      "name": "string.quoted.single.cddl",
      "patterns": [{ "include": "#stringcontent" }]
    },
    "stringcontent": {
      "patterns": [
        {
          "match": "(?x)                # turn on extended mode\n  \\\\                # a literal backslash\n  (?:               # ...followed by...\n    [\"\\\\/bfnrt]     # one of these characters\n    |               # ...or...\n    u               # a u\n    [0-9a-fA-F]{4}) # and four hex digits",
          "name": "constant.character.escape.cddl"
        },
        {
          "match": "\\\\.",
          "name": "invalid.illegal.unrecognized-string-escape.cddl"
        }
      ]
    },
    "socketplug": {
      "name": "keyword.operator.socketplug.cddl",
      "match": "\\$\\$|\\$"
    },
    "ruleidentifier": {
      "name": "entity.name.type.cddl",
      "match": "(\\w|@|\\$)+((-|\\.)*(\\w|@|\\$|\\d))*(?=(<\\w+(,\\s*\\w+)*>)?\\s*(=(?!>)|//=|/=))"
    },
    "ruleidentifierref": {
      "name": "variable.other.cddl",
      "match": "(\\w|@|\\$)+((-|\\.)*(\\w|@|\\$|\\d))*"
    },
    "choiceseparator": {
      "name": "keyword.operator.choice.cddl",
      "match": "/|//"
    },
    "occurrence": {
      "name": "keyword.operator.occurrence.cddl",
      "match": "\\?|\\+|\\*"
    },
    "number": {
      "match": "(?<!\\w)#?-?(?:0\\d*|[1-9]\\d*)(?:(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)?",
      "name": "constant.numeric.cddl"
    }
  }
}
